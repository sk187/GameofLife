exit
@world.print_board
exit
rspec
vis_row_str+='o'exit
vis_row_str+='o'
vis_row_str+'o'
vis_row_str = ''
vis_row+"o"
vis_row = ['']
puts vis_board[0]
vis_board
@world
puts row
row
exit
 @world.vis_board.each do |row|
row
@world.print
exit
@world.print
exit
 @world.vis_board
exit
@world.vis_board
exit
@vis_board
@world
exit
@board.vis
@board
exit
@board.vis
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
next
vis_row
cell.alive ? vis_row.push('o') : vis_row.push('x')
cell.alive ?
cell.alive?
cell
vis_row
exit
@board.vis_board
exit
@board.vis_board
@board.vis
exit
@board.vis
@board
exit
a.board
a.vis_board
a = Board.new(5,5)
@board.vis_board
@board.inspect
@board
exit
@board.vis_board
@board.board
@board.width
@board.vis_board
@board
@baord
@board.vis_board
@board
@board.populate_board
@board.populate
@board
exit
board
@board
exit
@board
@board.vis_board
exit
cell.alive
cell = @board[y][x]
exit
@board
@baord
exit
@board.inspect
exit
@board.inspect
@board.vis_board
exit
@board.vis_board
board.vis_board
board
@board
board
exit
@board
exit
@board
exit
@board
exit
@board.board
@board
exit
subject
Board.board
Board.inspect
Board
board
baord
cell.inspect
cell.class
cell == Cell
next
exit
board.each{ |row| row.each{|col| col.classe }}
board.each{ |row| row.each{|col| col.class? }}
board.each{ |row| row.each{|col| col }}
board.each{ |row| row.each{|col| col.first }}
board.each{ |row| row.each{|col| col.class }}
board.each{ |i| puts i.class }
board.each{ |i| puts i.inspect }
board.each{ |i| puts i }
board.each do |i|
board[1][0]
board[0][1]
board[0][0]
board
exit
board
exit
board.index(row)
row.index(col)
col.find_index
col.index
col
row
exit
exoit
subject.board.length
subject.board
subject.inspect
subject[0]
exit
subject.length
exit
subject.board
exit
subject.inspect
@board
exit
subject.board
@board
board
exit
subject.width
subject.inspect
exit
subject.inspect
exit
ab = build_stubbed(:cell)
exit
ab = build_stubbed(:cell)
a = build(:cell)
exit
a.alive
a.inspect
a = build(:cell)
exit
cell = build(:cell, :n1, :alive)
cell = build(:cell, :n1, :alive
exit
cell = build(:cell)
cell = build(:cell, neighbours: 1, alive: true)
cell = build(:cell).neighbours
cell = build(:cell, neighbours: 1, alive: true)
cell = build(:cell, neighbors: 1, alive: true)
cell = build(:cell, :n1, :alive)
exit
cell = create(:cell)
cell.inspect
cell = build(:cell)
exit
cell = build(:cell, :n1, :alive)
